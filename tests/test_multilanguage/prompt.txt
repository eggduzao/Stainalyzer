
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (001 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Python**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**Python**" as described above, **in a triple-backtick Python-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (002 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **JavaScript**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**JavaScript**" as described above, **in a triple-backtick JavaScript-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (003 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Java**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**Java**" as described above, **in a triple-backtick Java-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (004 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **R**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**R**" as described above, **in a triple-backtick R-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (005 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**C**" as described above, **in a triple-backtick C-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (006 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C++**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**C++**" as described above, **in a triple-backtick C++-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (007 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **SQL**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**SQL**" as described above, **in a triple-backtick SQL-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (008 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Bash**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**Bash**" as described above, **in a triple-backtick Bash-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (009 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **MATLAB**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**MATLAB**" as described above, **in a triple-backtick MATLAB-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (010 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Julia**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**Julia**" as described above, **in a triple-backtick Julia-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (011 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Go**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**Go**" as described above, **in a triple-backtick Go-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (012 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Rust**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**Rust**" as described above, **in a triple-backtick Rust-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (013 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Perl**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**Perl**" as described above, **in a triple-backtick Perl-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (014 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C#**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**C#**" as described above, **in a triple-backtick C#-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (015 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Scala**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**Scala**" as described above, **in a triple-backtick Scala-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (016 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Haskell**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**Haskell**" as described above, **in a triple-backtick Haskell-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (017 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **PHP**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**PHP**" as described above, **in a triple-backtick PHP-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (018 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Lisp**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**Lisp**" as described above, **in a triple-backtick Lisp-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (019 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Scheme**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**Scheme**" as described above, **in a triple-backtick Scheme-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (020 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **OCaml**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**OCaml**" as described above, **in a triple-backtick OCaml-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (021 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Erlang**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**Erlang**" as described above, **in a triple-backtick Erlang-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (022 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Elixir**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**Elixir**" as described above, **in a triple-backtick Elixir-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (023 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **SAS**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**SAS**" as described above, **in a triple-backtick SAS-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (024 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Fortran**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**Fortran**" as described above, **in a triple-backtick Fortran-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (025 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **VB.NET**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**VB.NET**" as described above, **in a triple-backtick VB.NET-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SURPRISE! Do the best you can!

# Multi-Prompt for Writting Different Algorithms in Different Language (026 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **LOLCODE**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Binary search in sorted array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
1
3
4
7
9
11
15
```

4. **RETURN:** Please return your implementation of "**Binary search in sorted array**" in "**LOLCODE**" as described above, **in a triple-backtick LOLCODE-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Now we start a new sprint with the in-pace quicksort...

# Multi-Prompt for Writting Different Algorithms in Different Language (027 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Python**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**Python**" as described above, **in a triple-backtick Python-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (028 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **JavaScript**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**JavaScript**" as described above, **in a triple-backtick JavaScript-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (029 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Java**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**Java**" as described above, **in a triple-backtick Java-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (030 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **R**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**R**" as described above, **in a triple-backtick R-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (031 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**C**" as described above, **in a triple-backtick C-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (032 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C++**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**C++**" as described above, **in a triple-backtick C++-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (033 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **SQL**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**SQL**" as described above, **in a triple-backtick SQL-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (034 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Bash**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**Bash**" as described above, **in a triple-backtick Bash-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (035 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **MATLAB**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**MATLAB**" as described above, **in a triple-backtick MATLAB-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (036 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Julia**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**Julia**" as described above, **in a triple-backtick Julia-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (037 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Go**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**Go**" as described above, **in a triple-backtick Go-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (038 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Rust**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**Rust**" as described above, **in a triple-backtick Rust-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (039 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Perl**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**Perl**" as described above, **in a triple-backtick Perl-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (040 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C#**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**C#**" as described above, **in a triple-backtick C#-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (041 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Scala**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**Scala**" as described above, **in a triple-backtick Scala-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (042 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Haskell**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**Haskell**" as described above, **in a triple-backtick Haskell-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (043 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **PHP**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**PHP**" as described above, **in a triple-backtick PHP-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (044 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Lisp**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**Lisp**" as described above, **in a triple-backtick Lisp-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (045 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Scheme**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**Scheme**" as described above, **in a triple-backtick Scheme-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (046 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **OCaml**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**OCaml**" as described above, **in a triple-backtick OCaml-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (047 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Erlang**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**Erlang**" as described above, **in a triple-backtick Erlang-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (048 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Elixir**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**Elixir**" as described above, **in a triple-backtick Elixir-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (049 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **SAS**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**SAS**" as described above, **in a triple-backtick SAS-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (050 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Fortran**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**Fortran**" as described above, **in a triple-backtick Fortran-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (051 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **VB.NET**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**VB.NET**" as described above, **in a triple-backtick VB.NET-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (052 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **LOLCODE**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **In-place quicksort on array**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
5
3
8
1
2
```

4. **RETURN:** Please return your implementation of "**In-place quicksort on array**" in "**LOLCODE**" as described above, **in a triple-backtick LOLCODE-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (053 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Python**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**Python**" as described above, **in a triple-backtick Python-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (054 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **JavaScript**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**JavaScript**" as described above, **in a triple-backtick JavaScript-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (055 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Java**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**Java**" as described above, **in a triple-backtick Java-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (056 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **R**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**R**" as described above, **in a triple-backtick R-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (057 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**C**" as described above, **in a triple-backtick C-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (058 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C++**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**C++**" as described above, **in a triple-backtick C++-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (059 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **SQL**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**SQL**" as described above, **in a triple-backtick SQL-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (060 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Bash**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**Bash**" as described above, **in a triple-backtick Bash-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (061 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **MATLAB**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**MATLAB**" as described above, **in a triple-backtick MATLAB-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (062 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Julia**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**Julia**" as described above, **in a triple-backtick Julia-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (063 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Go**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**Go**" as described above, **in a triple-backtick Go-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (064 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Rust**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**Rust**" as described above, **in a triple-backtick Rust-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (065 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Perl**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**Perl**" as described above, **in a triple-backtick Perl-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (066 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C#**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**C#**" as described above, **in a triple-backtick C#-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (067 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Scala**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**Scala**" as described above, **in a triple-backtick Scala-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (068 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Haskell**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**Haskell**" as described above, **in a triple-backtick Haskell-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (069 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **PHP**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**PHP**" as described above, **in a triple-backtick PHP-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (070 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Lisp**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**Lisp**" as described above, **in a triple-backtick Lisp-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (071 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Scheme**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**Scheme**" as described above, **in a triple-backtick Scheme-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (072 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **OCaml**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**OCaml**" as described above, **in a triple-backtick OCaml-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (073 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Erlang**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**Erlang**" as described above, **in a triple-backtick Erlang-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (074 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Elixir**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**Elixir**" as described above, **in a triple-backtick Elixir-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (075 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **SAS**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**SAS**" as described above, **in a triple-backtick SAS-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (076 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Fortran**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**Fortran**" as described above, **in a triple-backtick Fortran-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (077 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **VB.NET**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**VB.NET**" as described above, **in a triple-backtick VB.NET-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (078 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **LOLCODE**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Breadth-first search shortest path on unweighted graph**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
A	B	F
B	A	C
C	B	D
D	C	E
E	D	F
F	A	E
#	A	E
```

4. **RETURN:** Please return your implementation of "**Breadth-first search shortest path on unweighted graph**" in "**LOLCODE**" as described above, **in a triple-backtick LOLCODE-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (079 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Python**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**Python**" as described above, **in a triple-backtick Python-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (080 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **JavaScript**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**JavaScript**" as described above, **in a triple-backtick JavaScript-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (081 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Java**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**Java**" as described above, **in a triple-backtick Java-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (082 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **R**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**R**" as described above, **in a triple-backtick R-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (083 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**C**" as described above, **in a triple-backtick C-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (084 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C++**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**C++**" as described above, **in a triple-backtick C++-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (085 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **SQL**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**SQL**" as described above, **in a triple-backtick SQL-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (086 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Bash**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**Bash**" as described above, **in a triple-backtick Bash-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (087 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **MATLAB**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**MATLAB**" as described above, **in a triple-backtick MATLAB-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (088 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Julia**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**Julia**" as described above, **in a triple-backtick Julia-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (089 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Go**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**Go**" as described above, **in a triple-backtick Go-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (090 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Rust**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**Rust**" as described above, **in a triple-backtick Rust-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (091 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Perl**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**Perl**" as described above, **in a triple-backtick Perl-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (092 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C#**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**C#**" as described above, **in a triple-backtick C#-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (093 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Scala**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**Scala**" as described above, **in a triple-backtick Scala-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (094 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Haskell**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**Haskell**" as described above, **in a triple-backtick Haskell-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (095 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **PHP**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**PHP**" as described above, **in a triple-backtick PHP-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (096 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Lisp**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**Lisp**" as described above, **in a triple-backtick Lisp-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (097 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Scheme**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**Scheme**" as described above, **in a triple-backtick Scheme-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (098 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **OCaml**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**OCaml**" as described above, **in a triple-backtick OCaml-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (099 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Erlang**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**Erlang**" as described above, **in a triple-backtick Erlang-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (100 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Elixir**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**Elixir**" as described above, **in a triple-backtick Elixir-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (101 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **SAS**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**SAS**" as described above, **in a triple-backtick SAS-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (102 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Fortran**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**Fortran**" as described above, **in a triple-backtick Fortran-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (103 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **VB.NET**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**VB.NET**" as described above, **in a triple-backtick VB.NET-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (104 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **LOLCODE**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Levenshtein edit distance between two strings**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
kitten
sitting
```

4. **RETURN:** Please return your implementation of "**Levenshtein edit distance between two strings**" in "**LOLCODE**" as described above, **in a triple-backtick LOLCODE-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (105 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Python**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**Python**" as described above, **in a triple-backtick Python-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (106 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **JavaScript**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**JavaScript**" as described above, **in a triple-backtick JavaScript-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (107 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Java**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**Java**" as described above, **in a triple-backtick Java-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (108 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **R**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**R**" as described above, **in a triple-backtick R-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (109 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**C**" as described above, **in a triple-backtick C-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (110 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C++**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**C++**" as described above, **in a triple-backtick C++-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (111 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **SQL**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**SQL**" as described above, **in a triple-backtick SQL-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (112 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Bash**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**Bash**" as described above, **in a triple-backtick Bash-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (113 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **MATLAB**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**MATLAB**" as described above, **in a triple-backtick MATLAB-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (114 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Julia**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**Julia**" as described above, **in a triple-backtick Julia-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (115 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Go**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**Go**" as described above, **in a triple-backtick Go-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (116 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Rust**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**Rust**" as described above, **in a triple-backtick Rust-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (117 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Perl**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**Perl**" as described above, **in a triple-backtick Perl-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (118 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C#**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**C#**" as described above, **in a triple-backtick C#-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (119 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Scala**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**Scala**" as described above, **in a triple-backtick Scala-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (120 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Haskell**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**Haskell**" as described above, **in a triple-backtick Haskell-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (121 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **PHP**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**PHP**" as described above, **in a triple-backtick PHP-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (122 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Lisp**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**Lisp**" as described above, **in a triple-backtick Lisp-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (123 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Scheme**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**Scheme**" as described above, **in a triple-backtick Scheme-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (124 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **OCaml**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**OCaml**" as described above, **in a triple-backtick OCaml-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (125 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Erlang**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**Erlang**" as described above, **in a triple-backtick Erlang-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (126 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Elixir**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**Elixir**" as described above, **in a triple-backtick Elixir-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (127 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **SAS**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**SAS**" as described above, **in a triple-backtick SAS-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (128 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Fortran**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**Fortran**" as described above, **in a triple-backtick Fortran-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (129 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **VB.NET**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**VB.NET**" as described above, **in a triple-backtick VB.NET-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (130 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **LOLCODE**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **LRU cache with capacity N**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
ITEMS	A	B	C	D
CAPACITY	2
```

4. **RETURN:** Please return your implementation of "**LRU cache with capacity N**" in "**LOLCODE**" as described above, **in a triple-backtick LOLCODE-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (131 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Python**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**Python**" as described above, **in a triple-backtick Python-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (132 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **JavaScript**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**JavaScript**" as described above, **in a triple-backtick JavaScript-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (133 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Java**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**Java**" as described above, **in a triple-backtick Java-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (134 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **R**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**R**" as described above, **in a triple-backtick R-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (135 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**C**" as described above, **in a triple-backtick C-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (136 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C++**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**C++**" as described above, **in a triple-backtick C++-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (137 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **SQL**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**SQL**" as described above, **in a triple-backtick SQL-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (138 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Bash**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**Bash**" as described above, **in a triple-backtick Bash-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (139 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **MATLAB**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**MATLAB**" as described above, **in a triple-backtick MATLAB-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (140 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Julia**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**Julia**" as described above, **in a triple-backtick Julia-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (141 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Go**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**Go**" as described above, **in a triple-backtick Go-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (142 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Rust**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**Rust**" as described above, **in a triple-backtick Rust-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (143 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Perl**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**Perl**" as described above, **in a triple-backtick Perl-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (144 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C#**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**C#**" as described above, **in a triple-backtick C#-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (145 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Scala**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**Scala**" as described above, **in a triple-backtick Scala-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (146 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Haskell**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**Haskell**" as described above, **in a triple-backtick Haskell-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (147 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **PHP**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**PHP**" as described above, **in a triple-backtick PHP-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (148 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Lisp**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**Lisp**" as described above, **in a triple-backtick Lisp-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (149 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Scheme**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**Scheme**" as described above, **in a triple-backtick Scheme-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (150 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **OCaml**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**OCaml**" as described above, **in a triple-backtick OCaml-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (151 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Erlang**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**Erlang**" as described above, **in a triple-backtick Erlang-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (152 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Elixir**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**Elixir**" as described above, **in a triple-backtick Elixir-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (153 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **SAS**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**SAS**" as described above, **in a triple-backtick SAS-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (154 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Fortran**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**Fortran**" as described above, **in a triple-backtick Fortran-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (155 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **VB.NET**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**VB.NET**" as described above, **in a triple-backtick VB.NET-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (156 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **LOLCODE**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **K-means clustering on 2D points with configurable k**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
x	y
0	0
0	1
1	0
9	9
9	8
8	9
```

4. **RETURN:** Please return your implementation of "**K-means clustering on 2D points with configurable k**" in "**LOLCODE**" as described above, **in a triple-backtick LOLCODE-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (157 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Python**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**Python**" as described above, **in a triple-backtick Python-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (158 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **JavaScript**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**JavaScript**" as described above, **in a triple-backtick JavaScript-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (159 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Java**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**Java**" as described above, **in a triple-backtick Java-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (160 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **R**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**R**" as described above, **in a triple-backtick R-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (161 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**C**" as described above, **in a triple-backtick C-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (162 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C++**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**C++**" as described above, **in a triple-backtick C++-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (163 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **SQL**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**SQL**" as described above, **in a triple-backtick SQL-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (164 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Bash**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**Bash**" as described above, **in a triple-backtick Bash-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (165 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **MATLAB**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**MATLAB**" as described above, **in a triple-backtick MATLAB-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (166 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Julia**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**Julia**" as described above, **in a triple-backtick Julia-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (167 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Go**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**Go**" as described above, **in a triple-backtick Go-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (168 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Rust**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**Rust**" as described above, **in a triple-backtick Rust-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (169 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Perl**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**Perl**" as described above, **in a triple-backtick Perl-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (170 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C#**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**C#**" as described above, **in a triple-backtick C#-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (171 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Scala**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**Scala**" as described above, **in a triple-backtick Scala-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (172 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Haskell**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**Haskell**" as described above, **in a triple-backtick Haskell-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (173 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **PHP**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**PHP**" as described above, **in a triple-backtick PHP-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (174 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Lisp**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**Lisp**" as described above, **in a triple-backtick Lisp-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (175 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Scheme**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**Scheme**" as described above, **in a triple-backtick Scheme-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (176 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **OCaml**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**OCaml**" as described above, **in a triple-backtick OCaml-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (177 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Erlang**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**Erlang**" as described above, **in a triple-backtick Erlang-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (178 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Elixir**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**Elixir**" as described above, **in a triple-backtick Elixir-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (179 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **SAS**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**SAS**" as described above, **in a triple-backtick SAS-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (180 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Fortran**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**Fortran**" as described above, **in a triple-backtick Fortran-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (181 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **VB.NET**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**VB.NET**" as described above, **in a triple-backtick VB.NET-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (182 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **LOLCODE**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Sliding window maximum over array with window size W**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
W	3
1
3
-1
-3
5
3
6
7
```

4. **RETURN:** Please return your implementation of "**Sliding window maximum over array with window size W**" in "**LOLCODE**" as described above, **in a triple-backtick LOLCODE-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (183 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Python**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**Python**" as described above, **in a triple-backtick Python-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (184 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **JavaScript**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**JavaScript**" as described above, **in a triple-backtick JavaScript-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (185 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Java**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**Java**" as described above, **in a triple-backtick Java-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (186 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **R**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**R**" as described above, **in a triple-backtick R-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (187 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**C**" as described above, **in a triple-backtick C-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (188 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C++**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**C++**" as described above, **in a triple-backtick C++-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (189 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **SQL**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**SQL**" as described above, **in a triple-backtick SQL-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (190 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Bash**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**Bash**" as described above, **in a triple-backtick Bash-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (191 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **MATLAB**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**MATLAB**" as described above, **in a triple-backtick MATLAB-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (192 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Julia**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**Julia**" as described above, **in a triple-backtick Julia-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (193 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Go**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**Go**" as described above, **in a triple-backtick Go-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (194 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Rust**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**Rust**" as described above, **in a triple-backtick Rust-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (195 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Perl**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**Perl**" as described above, **in a triple-backtick Perl-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (196 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C#**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**C#**" as described above, **in a triple-backtick C#-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (197 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Scala**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**Scala**" as described above, **in a triple-backtick Scala-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (198 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Haskell**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**Haskell**" as described above, **in a triple-backtick Haskell-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (199 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **PHP**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**PHP**" as described above, **in a triple-backtick PHP-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (200 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Lisp**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**Lisp**" as described above, **in a triple-backtick Lisp-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (201 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Scheme**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**Scheme**" as described above, **in a triple-backtick Scheme-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (202 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **OCaml**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**OCaml**" as described above, **in a triple-backtick OCaml-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (203 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Erlang**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**Erlang**" as described above, **in a triple-backtick Erlang-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (204 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Elixir**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**Elixir**" as described above, **in a triple-backtick Elixir-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (205 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **SAS**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**SAS**" as described above, **in a triple-backtick SAS-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (206 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Fortran**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**Fortran**" as described above, **in a triple-backtick Fortran-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (207 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **VB.NET**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**VB.NET**" as described above, **in a triple-backtick VB.NET-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (208 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **LOLCODE**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Top-K frequent elements using hash map and min-heap**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
K	2
1
1
2
1
2
```

4. **RETURN:** Please return your implementation of "**Top-K frequent elements using hash map and min-heap**" in "**LOLCODE**" as described above, **in a triple-backtick LOLCODE-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (209 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Python**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**Python**" as described above, **in a triple-backtick Python-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (210 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **JavaScript**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**JavaScript**" as described above, **in a triple-backtick JavaScript-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (211 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Java**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**Java**" as described above, **in a triple-backtick Java-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (212 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **R**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**R**" as described above, **in a triple-backtick R-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (213 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**C**" as described above, **in a triple-backtick C-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (214 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C++**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**C++**" as described above, **in a triple-backtick C++-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (215 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **SQL**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**SQL**" as described above, **in a triple-backtick SQL-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (216 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Bash**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**Bash**" as described above, **in a triple-backtick Bash-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (217 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **MATLAB**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**MATLAB**" as described above, **in a triple-backtick MATLAB-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (218 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Julia**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**Julia**" as described above, **in a triple-backtick Julia-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (219 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Go**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**Go**" as described above, **in a triple-backtick Go-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (220 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Rust**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**Rust**" as described above, **in a triple-backtick Rust-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (221 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Perl**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**Perl**" as described above, **in a triple-backtick Perl-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (222 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C#**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**C#**" as described above, **in a triple-backtick C#-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (223 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Scala**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**Scala**" as described above, **in a triple-backtick Scala-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (224 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Haskell**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**Haskell**" as described above, **in a triple-backtick Haskell-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (225 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **PHP**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**PHP**" as described above, **in a triple-backtick PHP-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (226 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Lisp**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**Lisp**" as described above, **in a triple-backtick Lisp-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (227 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Scheme**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**Scheme**" as described above, **in a triple-backtick Scheme-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (228 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **OCaml**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**OCaml**" as described above, **in a triple-backtick OCaml-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (229 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Erlang**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**Erlang**" as described above, **in a triple-backtick Erlang-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (230 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Elixir**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**Elixir**" as described above, **in a triple-backtick Elixir-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (231 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **SAS**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**SAS**" as described above, **in a triple-backtick SAS-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (232 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Fortran**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**Fortran**" as described above, **in a triple-backtick Fortran-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (233 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **VB.NET**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**VB.NET**" as described above, **in a triple-backtick VB.NET-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (234 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **LOLCODE**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **Stable merge of two sorted lists into one**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
LIST1	LIST2
1	2
3	4
5	6
```

4. **RETURN:** Please return your implementation of "**Stable merge of two sorted lists into one**" in "**LOLCODE**" as described above, **in a triple-backtick LOLCODE-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (235 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Python**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**Python**" as described above, **in a triple-backtick Python-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (236 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **JavaScript**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**JavaScript**" as described above, **in a triple-backtick JavaScript-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (237 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Java**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**Java**" as described above, **in a triple-backtick Java-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (238 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **R**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**R**" as described above, **in a triple-backtick R-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (239 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**C**" as described above, **in a triple-backtick C-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (240 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C++**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**C++**" as described above, **in a triple-backtick C++-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (241 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **SQL**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**SQL**" as described above, **in a triple-backtick SQL-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (242 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Bash**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**Bash**" as described above, **in a triple-backtick Bash-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (243 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **MATLAB**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**MATLAB**" as described above, **in a triple-backtick MATLAB-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (244 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Julia**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**Julia**" as described above, **in a triple-backtick Julia-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (245 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Go**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**Go**" as described above, **in a triple-backtick Go-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (246 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Rust**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**Rust**" as described above, **in a triple-backtick Rust-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (247 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Perl**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**Perl**" as described above, **in a triple-backtick Perl-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (248 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **C#**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**C#**" as described above, **in a triple-backtick C#-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (249 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Scala**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**Scala**" as described above, **in a triple-backtick Scala-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (250 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Haskell**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**Haskell**" as described above, **in a triple-backtick Haskell-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (251 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **PHP**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**PHP**" as described above, **in a triple-backtick PHP-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (252 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Lisp**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**Lisp**" as described above, **in a triple-backtick Lisp-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (253 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Scheme**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**Scheme**" as described above, **in a triple-backtick Scheme-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (254 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **OCaml**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**OCaml**" as described above, **in a triple-backtick OCaml-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (255 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Erlang**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**Erlang**" as described above, **in a triple-backtick Erlang-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (256 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Elixir**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**Elixir**" as described above, **in a triple-backtick Elixir-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (257 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **SAS**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**SAS**" as described above, **in a triple-backtick SAS-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (258 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **Fortran**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**Fortran**" as described above, **in a triple-backtick Fortran-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (259 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **VB.NET**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**VB.NET**" as described above, **in a triple-backtick VB.NET-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Multi-Prompt for Writting Different Algorithms in Different Language (260 of 260)

> **GOAL:** Create a nice, well-documented, generalizeable to the extent possible before reaching this prompt's response maximum the algorthm defined below, using the language defined below.
Note: If such algorithm is "somehow not suited" for this language, just return this message.

1. **PROGRAMMING LANGUAGE:**
    1.1. This prompt's programming language is: **LOLCODE**.
    1.2. Since this is not an entirely real project, you can return the code in a single triple-backtick codebox (if possible).
    1.3. However, if more than one file is required, just create more than one triple-backtick codeboxes.
    1.4. Use the language as "script" even if the language is not made for such purpose.
    1.5. By "script" I DO NOT MEAN including she-bang executors, you must include the "language's traditional entrypoint execution" (e.g. python has 'if __name__ == "__main__"') [except for bash of course, then we want shebangs, clearly!].
    1.6. In languages that require more than one file (like headers in C++), always return the different files in different triple-backtick codeboxes. **And always from the 'denser' part of the code to the less**. If more than one 'combination or else' of files, cluster them (for instance main.cpp then main.h then algorithm.cpp then algorithm.h; but aim for the minimal amount of scripts and maximum amount of characters per script.).

2. **PROGRAMMING LANGUAGE:**
    2.1. This prompt's agorithm is: **SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**.
    2.2. Please develop the algorithm based on the input below, but also try to generalize the most you can (think that the input can be **very long** and contain edge cases).
    2.3. As said before, try to maximize the number of code in 1 file. But, depending on the language, create as many triple-backtick codeboxes in return possible.

3. **INPUT EXAMPLE:**
    3.1. This prompt's algorithm will use as input a text file (or the application of the commands) below.
    3.2. If the application of commands is not enough for algorithm contruction, assume you have to provide the rest of the commands (while assuming the size can always change).
    3.3. Structurally, the input does not change, except in cases I miss-constructed it. However, assume edge cases and GB-sized inputs.

```
DROP TABLE IF EXISTS events;
CREATE TABLE events(
patient_id TEXT,
event_date TEXT  -- ISO YYYY-MM-DD
);
INSERT INTO events(patient_id, event_date) VALUES
('u1','2025-01-05'),
('u2','2025-01-10'),
('u1','2025-02-03'),
('u3','2025-02-15'),
('u1','2025-03-20'),
('u2','2025-03-05'),
('u4','2025-03-18');
```

4. **RETURN:** Please return your implementation of "**SQL cohort analysis deduplicate latest per patient monthly active count rolling 3-month retention**" in "**LOLCODE**" as described above, **in a triple-backtick LOLCODE-codebox** (or more than one, each codebox should correspond to a file; assume I know how to label each file correctly).

--------------------

XXX

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------